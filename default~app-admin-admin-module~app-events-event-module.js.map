{"version":3,"sources":["../../../../../../src/material/form-field/error.ts","../../../../../../src/material/form-field/form-field-animations.ts","../../../../../../src/material/form-field/form-field-control.ts","../../../../../../src/material/form-field/form-field-errors.ts","../../../../../../src/material/form-field/hint.ts","../../../../../../src/material/form-field/label.ts","../../../../../../src/material/form-field/placeholder.ts","../../../../../../src/material/form-field/prefix.ts","../../../../../../src/material/form-field/suffix.ts","../../../../../../src/material/form-field/form-field.ts","../../../../../../src/material/form-field/form-field-module.ts","../../../../../../src/material/form-field/public-api.ts","../../../../../../src/material/form-field/index.ts"],"names":["nextUniqueId"],"mappings":"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","file":"default~app-admin-admin-module~app-events-event-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatError`. It serves as\n * alternative token to the actual `MatError` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_ERROR = new InjectionToken<MatError>('MatError');\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  },\n  providers: [{provide: MAT_ERROR, useExisting: MatError}],\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\nimport {Directive} from '@angular/core';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\n@Directive()\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken, Input} from '@angular/core';\n\nlet nextUniqueId = 0;\n\n/**\n * Injection token that can be used to reference instances of `MatHint`. It serves as\n * alternative token to the actual `MatHint` class which could cause unnecessary\n * retention of the class and its directive metadata.\n *\n * *Note*: This is not part of the public API as the MDC-based form-field will not\n * need a lightweight token for `MatHint` and we want to reduce breaking changes.\n */\nexport const _MAT_HINT = new InjectionToken<MatHint>('MatHint');\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  },\n  providers: [{provide: _MAT_HINT, useExisting: MatHint}],\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatPrefix`. It serves as\n * alternative token to the actual `MatPrefix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_PREFIX = new InjectionToken<MatPrefix>('MatPrefix');\n\n/** Prefix to be placed in front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n  providers: [{provide: MAT_PREFIX, useExisting: MatPrefix}],\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, InjectionToken} from '@angular/core';\n\n/**\n * Injection token that can be used to reference instances of `MatSuffix`. It serves as\n * alternative token to the actual `MatSuffix` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SUFFIX = new InjectionToken<MatSuffix>('MatSuffix');\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n  providers: [{provide: MAT_SUFFIX, useExisting: MatSuffix}],\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge, Subject} from 'rxjs';\nimport {startWith, take, takeUntil} from 'rxjs/operators';\nimport {MAT_ERROR, MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {_MAT_HINT, MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MAT_PREFIX, MatPrefix} from './prefix';\nimport {MAT_SUFFIX, MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nclass MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nconst _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/** Possible values for the \"floatLabel\" form-field input. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/**\n * Represents the default options for the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n  hideRequiredMarker?: boolean;\n  /**\n   * Whether the label for form-fields should by default float `always`,\n   * `never`, or `auto` (only when necessary).\n   */\n  floatLabel?: FloatLabelType;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n/**\n * Injection token that can be used to inject an instances of `MatFormField`. It serves\n * as alternative token to the actual `MatFormField` class which would cause unnecessary\n * retention of the `MatFormField` class and its component metadata.\n */\nexport const MAT_FORM_FIELD = new InjectionToken<MatFormField>('MatFormField');\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat()',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-has-label]': '_hasFloatingLabel()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {provide: MAT_FORM_FIELD, useExisting: MatFormField},\n  ]\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, OnDestroy, CanColor {\n  private _labelOptions: LabelOptions;\n\n  /**\n   * Whether the outline gap needs to be calculated\n   * immediately on the next change detection run.\n   */\n  private _outlineGapCalculationNeededImmediately = false;\n\n  /** Whether the outline gap needs to be calculated next time the zone has stabilized. */\n  private _outlineGapCalculationNeededOnStable = false;\n\n  private _destroyed = new Subject<void>();\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._outlineGapCalculationNeededOnStable = true;\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._getDefaultFloatLabelState();\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer', {static: true}) _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef<HTMLElement>;\n\n  @ContentChild(MatFormFieldControl) _controlNonStatic: MatFormFieldControl<any>;\n  @ContentChild(MatFormFieldControl, {static: true}) _controlStatic: MatFormFieldControl<any>;\n  get _control() {\n    // TODO(crisbeto): we need this workaround in order to support both Ivy and ViewEngine.\n    //  We should clean this up once Ivy is the default renderer.\n    return this._explicitFormFieldControl || this._controlNonStatic || this._controlStatic;\n  }\n  set _control(value) {\n    this._explicitFormFieldControl = value;\n  }\n  private _explicitFormFieldControl: MatFormFieldControl<any>;\n\n  @ContentChild(MatLabel) _labelChildNonStatic: MatLabel;\n  @ContentChild(MatLabel, {static: true}) _labelChildStatic: MatLabel;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n\n  // TODO: Remove cast once https://github.com/angular/angular/pull/37506 is available.\n  @ContentChildren(MAT_ERROR as any, {descendants: true}) _errorChildren: QueryList<MatError>;\n  // TODO: Remove cast once https://github.com/angular/angular/pull/37506 is available.\n  @ContentChildren(_MAT_HINT as any, {descendants: true}) _hintChildren: QueryList<MatHint>;\n  // TODO: Remove cast once https://github.com/angular/angular/pull/37506 is available.\n  @ContentChildren(MAT_PREFIX as any, {descendants: true}) _prefixChildren: QueryList<MatPrefix>;\n  // TODO: Remove cast once https://github.com/angular/angular/pull/37506 is available.\n  @ContentChildren(MAT_SUFFIX as any, {descendants: true}) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS) private _defaults:\n          MatFormFieldDefaultOptions, private _platform: Platform, private _ngZone: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._getDefaultFloatLabelState();\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n    this._hideRequiredMarker = (_defaults && _defaults.hideRequiredMarker != null) ?\n        _defaults.hideRequiredMarker : false;\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges\n        .pipe(takeUntil(this._destroyed))\n        .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Note that we have to run outside of the `NgZone` explicitly,\n    // in order to avoid throwing users into an infinite loop\n    // if `zone-patch-rxjs` is included.\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (this._outlineGapCalculationNeededOnStable) {\n          this.updateOutlineGap();\n        }\n      });\n    });\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._outlineGapCalculationNeededOnStable = true;\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        if (typeof requestAnimationFrame === 'function') {\n          this._ngZone.runOutsideAngular(() => {\n            requestAnimationFrame(() => this.updateOutlineGap());\n          });\n        } else {\n          this.updateOutlineGap();\n        }\n      });\n    }\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeededImmediately) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!(this._labelChildNonStatic || this._labelChildStatic);\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat() &&\n        ((this._control && this._control.shouldLabelFloat) || this._shouldAlwaysFloat());\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat()) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled && this._label) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /** Gets the default float label state. */\n  private _getDefaultFloatLabelState(): FloatLabelType {\n    return (this._defaults && this._defaults.floatLabel) || this._labelOptions.float || 'auto';\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent!.trim()) {\n      return;\n    }\n\n    if (!this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!this._isAttachedToDOM()) {\n      this._outlineGapCalculationNeededImmediately = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n\n    const container = this._connectionContainerRef.nativeElement;\n    const startEls = container.querySelectorAll('.mat-form-field-outline-start');\n    const gapEls = container.querySelectorAll('.mat-form-field-outline-gap');\n\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerRect = container.getBoundingClientRect();\n\n      // If the container's width and height are zero, it means that the element is\n      // invisible and we can't calculate the outline gap. Mark the element as needing\n      // to be checked the next time the zone stabilizes. We can't do this immediately\n      // on the next change detection, because even if the element becomes visible,\n      // the `ClientRect` won't be reclaculated immediately. We reset the\n      // `_outlineGapCalculationNeededImmediately` flag some we don't run the checks twice.\n      if (containerRect.width === 0 && containerRect.height === 0) {\n        this._outlineGapCalculationNeededOnStable = true;\n        this._outlineGapCalculationNeededImmediately = false;\n        return;\n      }\n\n      const containerStart = this._getStartEnd(containerRect);\n      const labelChildren = labelEl.children;\n      const labelStart = this._getStartEnd(labelChildren[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (let i = 0; i < labelChildren.length; i++) {\n        labelWidth += (labelChildren[i] as HTMLElement).offsetWidth;\n      }\n      startWidth = Math.abs(labelStart - containerStart) - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls[i].style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls[i].style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeededOnStable =\n        this._outlineGapCalculationNeededImmediately = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return (this._dir && this._dir.value === 'rtl') ? rect.right : rect.left;\n  }\n\n  /** Checks whether the form field is attached to the DOM. */\n  private _isAttachedToDOM(): boolean {\n    const element: HTMLElement = this._elementRef.nativeElement;\n\n    if (element.getRootNode) {\n      const rootNode = element.getRootNode();\n      // If the element is inside the DOM the root node will be either the document\n      // or the closest shadow root, otherwise it'll be the element itself.\n      return rootNode && rootNode !== element;\n    }\n\n    // Otherwise fall back to checking if it's in the document. This doesn't account for\n    // shadow DOM, however browser that support shadow DOM should support `getRootNode` as well.\n    return document.documentElement!.contains(element);\n  }\n\n  static ngAcceptInputType_hideRequiredMarker: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './form-field-module';\nexport * from './error';\nexport * from './form-field';\nexport {MatFormFieldControl} from './form-field-control';\nexport * from './form-field-errors';\nexport * from './hint';\nexport * from './placeholder';\nexport * from './prefix';\nexport * from './suffix';\nexport * from './label';\nexport * from './form-field-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"sourceRoot":"webpack:///"}