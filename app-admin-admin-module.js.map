{"version":3,"sources":["../../../../../../src/material/divider/divider.ts","../../../../../../src/material/divider/divider-module.ts","../../../../../../src/material/divider/public-api.ts","../../../../../../src/material/divider/index.ts","../../../../../../src/material/list/list.ts","../../../../../../src/material/list/selection-list.ts","../../../../../../src/material/list/list-module.ts","../../../../../../src/material/list/public-api.ts","../../../../../../src/material/list/index.ts","../../../../../../src/material/select/select-animations.ts","../../../../../../src/material/select/select-errors.ts","../../../../../../src/material/select/select.ts","../../../../../../src/material/select/select-module.ts","../../../../../../src/material/select/public-api.ts","../../../../../../src/material/select/index.ts","./src/app/admin/admin.component.html","./src/app/admin/dialogs/add.user.dialog.html","./src/app/admin/dialogs/confirm-delete-dialog.html","./src/app/admin/dialogs/edit.user.dialog.html","./src/app/admin/admin-routing.module.ts","./src/app/admin/admin.component.css","./src/app/admin/admin.component.ts","./src/app/admin/admin.module.ts","./src/app/admin/dialogs/add.user.dialog.component.ts","./src/app/admin/dialogs/confirm-delete.dialog.ts","./src/app/admin/dialogs/edit.user.dialog.component.ts"],"names":[],"mappings":"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","file":"app-admin-admin-module.js","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n\n  static ngAcceptInputType_vertical: BooleanInput;\n  static ngAcceptInputType_inset: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './divider';\nexport * from './divider-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, BooleanInput} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n  OnChanges,\n  OnDestroy,\n  ChangeDetectorRef,\n  Input,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n  mixinDisabled,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatListBase =\n    mixinDisabled(mixinDisableRipple(MatListBase));\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_LIST = new InjectionToken<MatList>('MatList');\n\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nexport const MAT_NAV_LIST = new InjectionToken<MatNavList>('MatNavList');\n\n@Component({\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list mat-list-base'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_NAV_LIST, useExisting: MatNavList}],\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisable, CanDisableRipple,\n  OnChanges, OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n@Component({\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {\n    'class': 'mat-list mat-list-base'\n  },\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple', 'disabled'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: MAT_LIST, useExisting: MatList}],\n})\nexport class MatList extends _MatListMixinBase implements CanDisable, CanDisableRipple, OnChanges,\n  OnDestroy {\n  /** Emits when the state of the list changes. */\n  _stateChanges = new Subject<void>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>) {\n    super();\n\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n\n    return null;\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item mat-focus-indicator',\n    '[class.mat-list-item-disabled]': 'disabled',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple, OnDestroy {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n  private _destroyed = new Subject<void>();\n\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_NAV_LIST) navList?: MatNavList,\n              @Optional() @Inject(MAT_LIST) list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || !!(this._list && this._list.disabled); }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled = false;\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  mixinDisableRipple,\n  setLines,\n  ThemePalette,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option mat-focus-indicator',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    // Manually set the \"primary\" or \"warn\" class if the color has been explicitly\n    // set to \"primary\" or \"warn\". The pseudo checkbox picks up these classes for\n    // its theme.\n    '[class.mat-primary]': 'color === \"primary\"',\n    // Even though accent is the default, we need to set this class anyway, because the  list might\n    // be placed inside a parent that has one of the other colors with a higher specificity.\n    '[class.mat-accent]': 'color !== \"primary\" && color !== \"warn\"',\n    '[class.mat-warn]': 'color === \"warn\"',\n    '[class.mat-list-single-selected-option]': 'selected && !selectionList.multiple',\n    '[attr.aria-selected]': 'selected',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.tabindex]': '-1',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase implements AfterContentInit, OnDestroy,\n                                                                      OnInit, FocusableOption,\n                                                                      CanDisableRipple {\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine, {descendants: true}) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  @Input()\n  get color(): ThemePalette { return this._color || this.selectionList.color; }\n  set color(newValue: ThemePalette) { this._color = newValue; }\n  private _color: ThemePalette;\n\n  /**\n   * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n   * in the first cycle.\n   */\n  private _inputsInitialized = false;\n  /** Value of the option */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this.selected && newValue !== this.value && this._inputsInitialized) {\n      this.selected = false;\n    }\n\n    this._value = newValue;\n  }\n  private _value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    const list = this.selectionList;\n\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n\n    const wasSelected = this._selected;\n\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_selected: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'listbox',\n    'class': 'mat-selection-list mat-list-base',\n    '(focus)': '_onFocus()',\n    '(keydown)': '_keydown($event)',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabindex]': '_tabIndex',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements CanDisableRipple,\n  AfterContentInit, ControlValueAccessor, OnDestroy, OnChanges {\n  private _multiple = true;\n  private _contentInitialized = false;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption, {descendants: true}) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /**\n   * Tabindex of the selection list.\n   * @breaking-change 11.0.0 Remove `tabIndex` input.\n   */\n  @Input() tabIndex: number = 0;\n\n  /** Theme color of the selection list. This sets the checkbox color for all list options. */\n  @Input() color: ThemePalette = 'accent';\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  private _disabled: boolean = false;\n\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._multiple) {\n      if (isDevMode() && this._contentInitialized) {\n        throw new Error(\n            'Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n\n  /** The currently selected options. */\n  selectedOptions = new SelectionModel<MatListOption>(this._multiple);\n\n  /** The tabindex of the selection list. */\n  _tabIndex = -1;\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Keeps track of the currently-selected value. */\n  _value: string[]|null;\n\n  /** Emits when the list has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  /** Whether the list has been destroyed. */\n  private _isDestroyed: boolean;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n    // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n    @Attribute('tabindex') tabIndex: string,\n    private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  ngAfterContentInit(): void {\n    this._contentInitialized = true;\n\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n\n    if ((disableRippleChanges && !disableRippleChanges.firstChange) ||\n        (colorChanges && !colorChanges.firstChange)) {\n      this._markOptionsForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n\n  /** Focuses the selection list. */\n  focus(options?: FocusOptions) {\n    this._element.nativeElement.focus(options);\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItem(option);\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      case HOME:\n      case END:\n        if (!hasModifier) {\n          keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') &&\n            !manager.isTyping()) {\n          const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n          this._setAllOptionsSelected(shouldSelect, true);\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /**\n   * When the selection list is focused, we want to move focus to an option within the list. Do this\n   * by setting the appropriate option to be active.\n   */\n  _onFocus(): void {\n    const activeIndex = this._keyManager.activeItemIndex;\n\n    if (!activeIndex || (activeIndex === -1)) {\n      // If there is no active index, set focus to the first option.\n      this._keyManager.setFirstItemActive();\n    } else {\n      // Otherwise, set focus to the active option.\n      this._keyManager.setActiveItem(activeIndex);\n    }\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    this._value = values;\n\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean, skipDisabled?: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n\n  /** Marks all the options to be checked in the next change detection run. */\n  private _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  private _allowFocusEscape() {\n    this._tabIndex = -1;\n\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n\n  /** Updates the tabindex based upon if the selection list is empty. */\n  private _updateTabIndex(): void {\n    this._tabIndex = (this.options.length === 0) ? -1 : 0;\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './list-module';\nexport * from './list';\nexport * from './selection-list';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  animateChild,\n  AnimationTriggerMetadata,\n  query,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanelWrap: AnimationTriggerMetadata;\n  readonly transformPanel: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [\n      transition('* => void', query('@transformPanel', [animateChild()],\n          {optional: true}))\n  ]),\n\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager, LiveAnnouncer} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  BooleanInput,\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  hasModifierKey,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  CdkConnectedOverlay,\n  ConnectedPosition,\n  Overlay,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTGROUP,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MAT_FORM_FIELD, MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport const SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** Object that can be used to configure the default options for the select module. */\nexport interface MatSelectConfig {\n  /** Whether option centering should be disabled. */\n  disableOptionCentering?: boolean;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  typeaheadDebounceInterval?: number;\n}\n\n/** Injection token that can be used to provide the default options the select module. */\nexport const MAT_SELECT_CONFIG = new InjectionToken<MatSelectConfig>('MAT_SELECT_CONFIG');\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nclass MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nconst _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const MAT_SELECT_TRIGGER = new InjectionToken<MatSelectTrigger>('MatSelectTrigger');\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger',\n  providers: [{provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger}],\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanelWrap,\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions: ConnectedPosition[] = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /**\n   * Overlay pane containing the options.\n   * @deprecated To be turned into a private API.\n   * @breaking-change 10.0.0\n   * @docs-private\n   */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, {descendants: true}) options: QueryList<MatOption>;\n\n  // TODO: Remove cast once https://github.com/angular/angular/pull/37506 is available.\n  /** All of the defined groups of options. */\n  @ContentChildren(MAT_OPTGROUP as any, {descendants: true}) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  // TODO: Remove cast once https://github.com/angular/angular/pull/37506 is available.\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MAT_SELECT_TRIGGER as any) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      if (this.options) {\n        this._setSelectionByValue(newValue);\n      }\n\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n  @Input()\n  get typeaheadDebounceInterval(): number { return this._typeaheadDebounceInterval; }\n  set typeaheadDebounceInterval(value: number) {\n    this._typeaheadDebounceInterval = coerceNumberProperty(value);\n  }\n  private _typeaheadDebounceInterval: number;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    const options = this.options;\n\n    if (options) {\n      return options.changes.pipe(\n        startWith(options),\n        switchMap(() => merge(...options.map(option => option.onSelectionChange)))\n      );\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  }) as Observable<MatOptionSelectionChange>;\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() @Inject(MAT_FORM_FIELD) private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any,\n    private _liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MAT_SELECT_CONFIG) defaults?: MatSelectConfig) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    if (defaults) {\n      if (defaults.disableOptionCentering != null) {\n        this.disableOptionCentering = defaults.disableOptionCentering;\n      }\n\n      if (defaults.typeaheadDebounceInterval != null) {\n        this.typeaheadDebounceInterval = defaults.typeaheadDebounceInterval;\n      }\n    }\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this._panelOpen) {\n          this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n\n    if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n      this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    this.value = value;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (!manager.isTyping() && (isOpenKey && !hasModifierKey(event)) ||\n      ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      const previouslySelectedOption = this.selected;\n\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n\n      const selectedOption = this.selected;\n\n      // Since the value has changed, we need to announce it ourselves.\n      if (selectedOption && previouslySelectedOption !== selectedOption) {\n        // We set a duration on the live announcement, because we want the live element to be\n        // cleared after a while so that users can't navigate to it using the arrow keys.\n        this._liveAnnouncer.announce((selectedOption as MatOption).viewValue, 10000);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const manager = this._keyManager;\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const isTyping = manager.isTyping();\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n      // Don't do anything in this case if the user is typing,\n      // because the typing sequence can include the space key.\n    } else if (!isTyping && (keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n      !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.updateActiveItem(correspondingOption);\n      } else if (!this.panelOpen) {\n        // Otherwise reset the highlighted option. Note that we only want to do this while\n        // closed, because doing it while open can shift the user's focus unnecessarily.\n        this._keyManager.updateActiveItem(-1);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead(this._typeaheadDebounceInterval)\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        // Select the active item when tabbing away. This is consistent with how the native\n        // select behaves. Note that we only want to do this in single selection mode.\n        if (!this.multiple && this._keyManager.activeItem) {\n          this._keyManager.activeItem._selectViaInteraction();\n        }\n\n        // Restore focus to the trigger before closing. Ensures that the focus\n        // position won't be lost if the user got focus into the overlay.\n        this.focus();\n        this.close();\n      }\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n\n      if (this.value != null) {\n        this._propagateChanges(option.value);\n      }\n    } else {\n      if (wasSelected !== option.selected) {\n        option.selected ? this._selectionModel.select(option) :\n                          this._selectionModel.deselect(option);\n      }\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(options?: FocusOptions): void {\n    this._elementRef.nativeElement.focus(options);\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      if (result !== undefined) {\n        return result;\n      }\n\n      return option === current ? index : undefined;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_multiple: BooleanInput;\n  static ngAcceptInputType_disableOptionCentering: BooleanInput;\n  static ngAcceptInputType_typeaheadDebounceInterval: NumberInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {CdkScrollableModule} from '@angular/cdk/scrolling';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [\n    CdkScrollableModule,\n    MatFormFieldModule,\n    MatSelect,\n    MatSelectTrigger,\n    MatOptionModule,\n    MatCommonModule\n  ],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './select-module';\nexport * from './select';\nexport * from './select-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","export default \"<div class=\\\"container\\\" style=\\\"padding: 2em 0; min-height: 90vh;\\\">\\n    <div class=\\\"fixed-action-btn horizontal hide-on-small-only\\\" style=\\\"top: 90px;\\\">\\n        <a class=\\\"btn-floating btn-large waves-effect red\\\" (click)=\\\"createUser()\\\">\\n            <i class=\\\"material-icons\\\">add</i>\\n        </a>\\n    </div>\\n    <mat-tab-group [dynamicHeight]=\\\"true\\\" [headerPosition]=\\\"'above'\\\" mat-stretch-tabs>\\n        <mat-tab label=\\\"User Management\\\" id=\\\"tab-user-management\\\">\\n            <mat-card>\\n\\n                <mat-progress-spinner *ngIf=\\\"loading.users\\\" style=\\\"margin: 0 auto;\\\"\\n                                     [mode]=\\\"'indeterminate'\\\">\\n                </mat-progress-spinner>\\n\\n                <div class=\\\"progress\\\" *ngIf=\\\"saving.users\\\">\\n                    <div class=\\\"indeterminate\\\"></div>\\n                </div>\\n                <div class=\\\"row\\\" style=\\\"width: 100%;\\\" *ngFor=\\\"let user of users; let last = last;\\\">\\n                    <div class=\\\"col s12 m6 l7\\\">\\n                        <img class=\\\"profile-image\\\"\\n                             src=\\\"https://inomics.com/sites/default/files/pictures/picture-95970-1460131169.png\\\"/>\\n\\n                        <h5 class=\\\"profile-name\\\">{{ user._first }} {{ user._last }}</h5>\\n\\n                    </div>\\n                    <div class=\\\"col s12 m6 l5\\\">\\n                        <button mat-raised-button class=\\\"action-button\\\" color=\\\"warn\\\" (click)=\\\"confirmDelete( user )\\\">\\n                            <mat-icon>delete</mat-icon>\\n                        </button>\\n                        <button mat-raised-button class=\\\"action-button\\\" color=\\\"primary\\\" (click)=\\\"editUser( user )\\\">\\n                            <mat-icon>edit</mat-icon>\\n                        </button>\\n                    </div>\\n                    <mat-divider class=\\\"profile-divider\\\" *ngIf=\\\"!last\\\"></mat-divider>\\n                </div>\\n            </mat-card>\\n        </mat-tab>\\n        <mat-tab label=\\\"News Management\\\">\\n\\n        </mat-tab>\\n        <mat-tab label=\\\"Article Management\\\">\\n\\n        </mat-tab>\\n        <mat-tab label=\\\"Profile Management\\\">\\n\\n        </mat-tab>\\n    </mat-tab-group>\\n\\n    <div class=\\\"fixed-action-btn horizontal hide-on-med-and-up\\\" style=\\\"bottom: 180px;\\\">\\n        <a class=\\\"btn-floating btn-large waves-effect red\\\" (click)=\\\"createUser()\\\">\\n            <i class=\\\"material-icons\\\">add</i>\\n        </a>\\n    </div>\\n</div>\\n\";","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col s12\\\">\\n        <h1 mat-dialog-title>Add New User</h1>\\n\\n        <div mat-dialog-content>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col s12\\\">\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"email\\\" placeholder=\\\"First name\\\" [(ngModel)]=\\\"user.first\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"text\\\" placeholder=\\\"Last name\\\" [(ngModel)]=\\\"user.last\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"text\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"user.email\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"user.password\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"user.password_confirm\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <mat-select placeholder=\\\"User Role\\\" [(ngModel)]=\\\"user.role\\\" name=\\\"role\\\" style=\\\"width: 100%;\\\">\\n                            <mat-option [value]=\\\"'admin'\\\"> Admin</mat-option>\\n                            <mat-option [value]=\\\"'editor'\\\"> Editor</mat-option>\\n                        </mat-select>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div mat-dialog-actions>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col s12\\\">\\n                    <button class=\\\"waves-effect waves-light btn orange right\\\" (click)=\\\"dialogRef.close(false)\\\">\\n                        <i class=\\\"material-icons left\\\">cancel</i>Cancel\\n                    </button>\\n                    <button class=\\\"waves-effect waves-light btn green right\\\" style=\\\"margin-right: 5px;\\\"\\n                            (click)=\\\"create()\\\">\\n                        <i class=\\\"material-icons left\\\">save</i>Save\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"progress\\\" *ngIf=\\\"saving\\\">\\n    <div class=\\\"indeterminate\\\"></div>\\n</div>\";","export default \"<div>\\n    <h1 class=\\\"mat-dialog-title\\\" mat-dialog-title=\\\"\\\" id=\\\"mat-dialog-title-5\\\">Delete User</h1>\\n    <div class=\\\"mat-dialog-content\\\" mat-dialog-content>\\n        Are you sure you wish to delete the user <b>{{user._first}} {{user._last}}</b>\\n    </div>\\n    <div class=\\\"mat-dialog-actions right\\\" mat-dialog-actions>\\n        <button class=\\\"waves-effect waves-light btn green\\\" (click)=\\\"dialogRef.close(true)\\\"\\n        style=\\\"margin: 0 10px 0 0;\\\">\\n            Confirm\\n        </button>\\n        <button class=\\\"waves-effect waves-light btn red\\\" (click)=\\\"dialogRef.close(false)\\\">\\n            Cancel\\n        </button>\\n    </div>\\n</div>\";","export default \"<div class=\\\"row\\\">\\n    <div class=\\\"col s12\\\">\\n        <h1 mat-dialog-title>Edit User</h1>\\n\\n        <div mat-dialog-content>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col s12\\\">\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"email\\\" placeholder=\\\"First name\\\" [(ngModel)]=\\\"user._first\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"text\\\" placeholder=\\\"Last name\\\" [(ngModel)]=\\\"user._last\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"text\\\" placeholder=\\\"Email\\\" [(ngModel)]=\\\"user._email\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <input type=\\\"password\\\" placeholder=\\\"Password\\\" [(ngModel)]=\\\"user._password\\\">\\n                    </div>\\n                    <div class=\\\"input-field\\\">\\n                        <mat-select placeholder=\\\"User Role\\\" [(ngModel)]=\\\"user._role\\\" name=\\\"role\\\" style=\\\"width: 100%;\\\">\\n                            <mat-option [value]=\\\"'admin'\\\"> Admin</mat-option>\\n                            <mat-option [value]=\\\"'editor'\\\"> Editor</mat-option>\\n                        </mat-select>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <div mat-dialog-actions>\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col s12\\\">\\n                    <button class=\\\"waves-effect waves-light btn orange right\\\" (click)=\\\"dialogRef.close(false)\\\">\\n                        <i class=\\\"material-icons left\\\">cancel</i>Cancel\\n                    </button>\\n                    <button class=\\\"waves-effect waves-light btn green right\\\" style=\\\"margin-right: 5px;\\\"\\n                            (click)=\\\"dialogRef.close(user)\\\">\\n                        <i class=\\\"material-icons left\\\">save</i>Save\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n<div class=\\\"progress\\\" *ngIf=\\\"saving\\\">\\n    <div class=\\\"indeterminate\\\"></div>\\n</div>\";","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {AdminComponent} from './admin.component';\n\nconst adminRoutes: Routes = [\n    {\n        path: '',\n        component: AdminComponent\n    },\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(adminRoutes)\n    ],\n    exports: [\n        RouterModule\n    ],\n    providers: [ ]\n})\n\nexport class AdminRoutingModule {}\n","export default \".action-button {\\n    float: right;\\n    margin: 1em;\\n    color: #FFF;\\n}\\n\\n.action-button:nth-child(1) {\\n    margin-right:0;\\n}\\n\\n.profile-image{\\n    width:  75px;\\n    vertical-align:middle\\n}\\n\\n.profile-name {\\n    display: inline;\\n    padding: 1em 0 1em 1em;\\n}\\n\\n.profile-divider{\\n    display: inline-block;\\n    border-bottom: 1px solid #ced2d5;\\n    width: 100%;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYWRtaW4vYWRtaW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFlBQVk7SUFDWixXQUFXO0lBQ1gsV0FBVztBQUNmOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLFlBQVk7SUFDWjtBQUNKOztBQUVBO0lBQ0ksZUFBZTtJQUNmLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixnQ0FBZ0M7SUFDaEMsV0FBVztBQUNmIiwiZmlsZSI6InNyYy9hcHAvYWRtaW4vYWRtaW4uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5hY3Rpb24tYnV0dG9uIHtcbiAgICBmbG9hdDogcmlnaHQ7XG4gICAgbWFyZ2luOiAxZW07XG4gICAgY29sb3I6ICNGRkY7XG59XG5cbi5hY3Rpb24tYnV0dG9uOm50aC1jaGlsZCgxKSB7XG4gICAgbWFyZ2luLXJpZ2h0OjA7XG59XG5cbi5wcm9maWxlLWltYWdle1xuICAgIHdpZHRoOiAgNzVweDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjptaWRkbGVcbn1cblxuLnByb2ZpbGUtbmFtZSB7XG4gICAgZGlzcGxheTogaW5saW5lO1xuICAgIHBhZGRpbmc6IDFlbSAwIDFlbSAxZW07XG59XG5cbi5wcm9maWxlLWRpdmlkZXJ7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjY2VkMmQ1O1xuICAgIHdpZHRoOiAxMDAlO1xufVxuIl19 */\";","import {Component, OnInit} from '@angular/core';\nimport {User} from '../models/user.model';\nimport {ConfirmDeleteDialog} from './dialogs/confirm-delete.dialog';\nimport {AdminService} from '../services/admin.service';\nimport {EditUserDialogComponent} from './dialogs/edit.user.dialog.component';\nimport {AddUserDialogComponent} from './dialogs/add.user.dialog.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n\tselector: 'app-home',\n\ttemplateUrl: './admin.component.html',\n\tstyleUrls: ['./admin.component.css']\n})\nexport class AdminComponent implements OnInit {\n\n\tpublic users: Array<User> = [];\n\tpublic loading: any = {\n\t\tusers: true\n\t};\n\n\tpublic saving: any = {\n\t\tusers: false\n\t};\n\n\tconstructor(private dialog: MatDialog,\n\t\t\t\tprivate _adminService: AdminService,\n\t\t\t\tprivate snackBar: MatSnackBar) {\n\t}\n\n\tngOnInit(): void {\n\t\tthis._adminService.getUsers()\n\t\t\t.subscribe((users: Array<User>) => {\n\t\t\t\tthis.users = users;\n\t\t\t})\n\t\t\t.add(() => {\n\t\t\t\tthis.loading.users = false;\n\t\t\t});\n\t}\n\n\tconfirmDelete(user: User): void {\n\t\tlet dialogRef = this.dialog.open(ConfirmDeleteDialog);\n\t\tdialogRef.componentInstance.user = user;\n\n\t\tdialogRef.afterClosed()\n\t\t\t.subscribe(result => {\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._adminService.deleteUser(user)\n\t\t\t\t\t\t.then(response => {\n\t\t\t\t\t\t\tthis.users.splice(this.users.indexOf(user), 1);\n\t\t\t\t\t\t\tthis.snackBar.open('User Deleted', null, {\n\t\t\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tthis.snackBar.open(error.statusText, null, {\n                                panelClass: ['error-snackbar'],\n\t\t\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\teditUser(user: User): void {\n\t\tlet dialogRef = this.dialog.open(EditUserDialogComponent, {data: {user: user}});\n\n\t\tdialogRef.afterClosed()\n\t\t\t.subscribe(result => {\n\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._adminService.editUser(result)\n\t\t\t\t\t\t.then(response => {\n\t\t\t\t\t\t\tthis.users.splice(this.users.indexOf(user), 1, new User(response));\n\t\t\t\t\t\t\tthis.snackBar.open('User Updated', null, {\n\t\t\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tthis.snackBar.open(error.statusText, null, {\n                                panelClass: ['error-snackbar'],\n\t\t\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tcreateUser(): void {\n\t\tlet dialogRef = this.dialog.open(AddUserDialogComponent);\n\n\t\tdialogRef.afterClosed()\n\t\t\t.subscribe(result => {\n\t\t\t\tthis.saving.users = true;\n\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._adminService.addUser(result)\n\t\t\t\t\t\t.then(response => {\n\t\t\t\t\t\t\tthis.users.push(new User(response));\n\n\t\t\t\t\t\t\tthis.snackBar.open('User Created', null, {\n\t\t\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tthis.snackBar.open(error.statusText, null, {\n                                panelClass: ['error-snackbar'],\n\t\t\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tthis.saving.users = false;\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tthis.saving.users = false;\n\t\t\t\t}\n\n\t\t\t});\n\t}\n}\n","import {NgModule} from '@angular/core';\nimport {AdminComponent} from './admin.component';\nimport {AdminRoutingModule} from './admin-routing.module';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatListModule} from '@angular/material/list';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {SharedModule} from '../shared.module';\nimport {ConfirmDeleteDialog} from './dialogs/confirm-delete.dialog';\nimport {EditUserDialogComponent} from './dialogs/edit.user.dialog.component';\nimport {AddUserDialogComponent} from './dialogs/add.user.dialog.component';\n\n@NgModule({\n  declarations: [\n    AdminComponent,\n    EditUserDialogComponent,\n    AddUserDialogComponent,\n    ConfirmDeleteDialog\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    AdminRoutingModule,\n    MatTabsModule,\n    MatCardModule,\n    MatListModule,\n    MatButtonModule,\n    MatIconModule,\n    MatDialogModule,\n    MatSnackBarModule,\n    SharedModule,\n    MatSelectModule,\n    MatProgressSpinnerModule\n  ],\n  entryComponents: [ConfirmDeleteDialog, EditUserDialogComponent, AddUserDialogComponent],\n  providers: [],\n  bootstrap: [AdminComponent]\n})\nexport class AdminModule {\n}\n","import {Component} from '@angular/core';\nimport {MatDialogRef} from '@angular/material/dialog';\nimport {MatSnackBar} from '@angular/material/snack-bar';\n\n@Component({\n\tselector: 'add-user-dialog',\n\ttemplateUrl: './add.user.dialog.html',\n})\nexport class AddUserDialogComponent {\n\tpublic user: any = {\n\t\tfirst: '',\n\t\tlast: '',\n\t\temail: '',\n\t\tpassword: '',\n\t\tpassword_confirm: '',\n\t\trole: ''\n\t};\n\n\tpublic saving: boolean = false;\n\n\tconstructor(public dialogRef: MatDialogRef<AddUserDialogComponent>,\n\t\t\t\tprivate snackBar: MatSnackBar) {\n\n\t}\n\n\tcreate(): void {\n\t\tthis.saving = true;\n\n\t\tif (this.user.password !== this.user.password_confirm) {\n\t\t\tthis.snackBar.open('Passwords do not match', null, {\n                panelClass: ['error-snackbar'],\n\t\t\t\tduration: 3000\n\t\t\t});\n\n\t\t\tthis.saving = false;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dialogRef.close(this.user);\n\t\tthis.saving = false;\n\n\t\treturn;\n\t}\n}\n","import {Component} from '@angular/core';\nimport {User} from '../../models/user.model';\nimport {MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n\tselector: 'confirm-delete-dialog',\n\ttemplateUrl: 'confirm-delete-dialog.html',\n})\nexport class ConfirmDeleteDialog {\n\tpublic user: User;\n\n\tconstructor(public dialogRef: MatDialogRef<ConfirmDeleteDialog>) {\n\t}\n}\n","import {Component, Inject} from '@angular/core';\nimport {User} from '../../models/user.model';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\n\n@Component({\n\tselector: 'edit-user-dialog',\n\ttemplateUrl: './edit.user.dialog.html',\n})\nexport class EditUserDialogComponent {\n\tpublic user: User;\n\tpublic saving: boolean = false;\n\n\tconstructor(public dialogRef: MatDialogRef<EditUserDialogComponent>,\n\t\t\t\t@Inject(MAT_DIALOG_DATA) public data: any) {\n\t\tthis.user = data.user;\n\t}\n}\n"],"sourceRoot":"webpack:///"}